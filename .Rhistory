for(i in seq(1,Ns,1)){
C[i] <-  iscon(c(X[i,]),c(Y[i,]),c(Z[i,]),Ld)
}
dim <- 5
dim <- Np + 1
Acf <- matrix(rep(1,dim*dim), nrow = dim, ncol = dim)
for(i in seq(1,dim,1)){
for(j in seq(1,dim,1)){
if((i+j) %% 2==0) { Acf[i,j]=0 }
}
}
################################################
# Function to find if cluster is connected
iscon <- function(X,Y,Z,Ld) {
Dim <- length(X)
# Calc adj matrix (Notice Acf factor)
AdjM <- 1*(as.matrix(dist(cbind(X,Y,Z),method = "euclidian"))<Ld) * Acf
# Convert to graph
G <- graph_from_adjacency_matrix(AdjM,mode = "undirected",diag = FALSE)
# Check connected
return(1*(is_connected(G)))
}
mratio2 <- function(X,Y,Z) {
Dim <- length(X)
# Calc adj matrix (Notice Acf factor)
AdjM <- 1*(as.matrix(dist(cbind(X,Y,Z),method = "euclidian"))<Ld) * Acf
# Convert to graph
G <- graph_from_adjacency_matrix(AdjM,mode = "undirected",diag = FALSE,add.colnames = NULL)
# Calc mratio
CV1 <- seq(Dim,0.5,-2)
CV2 <- seq(Dim-1,0.5,-2)
L1 <- length(CV1)
L2 <- length(CV2)
M <- rep(0,L1*L2)
n=1
for(l in CV1){
for(o in CV2){
M[n] <- is_connected(G-vertex(l,o))
n=n+1
}
}
return(L1*L2/sum(M))
}
dim <- 10
Acf <- matrix(rep(1,dim*dim), nrow = dim, ncol = dim)
for(i in seq(1,dim,1)){
for(j in seq(1,dim,1)){
if((i+j) %% 2==0) { Acf[i,j]=0 }
}
}
################################################
# Function to find if cluster is connected
iscon <- function(X,Y,Z,Ld) {
Dim <- length(X)
# Calc adj matrix (Notice Acf factor)
AdjM <- 1*(as.matrix(dist(cbind(X,Y,Z),method = "euclidian"))<Ld) * Acf
# Convert to graph
G <- graph_from_adjacency_matrix(AdjM,mode = "undirected",diag = FALSE)
# Check connected
return(1*(is_connected(G)))
}
mratio2 <- function(X,Y,Z) {
Dim <- length(X)
# Calc adj matrix (Notice Acf factor)
AdjM <- 1*(as.matrix(dist(cbind(X,Y,Z),method = "euclidian"))<Ld) * Acf
# Convert to graph
G <- graph_from_adjacency_matrix(AdjM,mode = "undirected",diag = FALSE,add.colnames = NULL)
# Calc mratio
CV1 <- seq(Dim,0.5,-2)
CV2 <- seq(Dim-1,0.5,-2)
L1 <- length(CV1)
L2 <- length(CV2)
M <- rep(0,L1*L2)
n=1
for(l in CV1){
for(o in CV2){
M[n] <- is_connected(G-vertex(l,o))
n=n+1
}
}
return(L1*L2/sum(M))
}
Ti <- 1
k=0
SUM=0
C <- rep(0,Ns)
X <- matrix(round(runif(Ns*1,min=0,max = Lx),3), ncol = 1)
Y <- matrix(round(runif(Ns*1,min=0,max = Ly),3), ncol = 1)
Z <- matrix(round(runif(Ns*1,min=0,max = Lz),3), ncol = 1)
################################################
# Combine fixed particle with configurations to create cluster of size (N+1)
X2 <- cbind(X,rev(SX[j,]))
Y2 <- cbind(Y,rev(SY[j,]))
Z2 <- cbind(Z,rev(SZ[j,]))
X <- X2
Y <- Y2
Z <- Z2
rm(X2,Y2,Z2)
for(i in seq(1,Ns,1)){
C[i] <-  iscon(c(X[i,]),c(Y[i,]),c(Z[i,]),Ld)
}
C
SX[1,]
Dim <- length(SX[1,])
AdjM <- 1*(as.matrix(dist(cbind(c(SX[1,]),c(SY[1,]),c(SZ[1,])),method = "euclidian"))<Ld) * Acf
Dim
Acf <- matrix(rep(1,dim*dim), nrow = dim, ncol = dim)
for(i in seq(1,dim,1)){
for(j in seq(1,dim,1)){
if((i+j) %% 2==0) { Acf[i,j]=0 }
}
}
AdjM <- 1*(as.matrix(dist(cbind(c(SX[1,]),c(SY[1,]),c(SZ[1,])),method = "euclidian"))<Ld) * Acf
Acf
Dim <- 9
Acf <- matrix(rep(1,dim*dim), nrow = dim, ncol = dim)
for(i in seq(1,dim,1)){
for(j in seq(1,dim,1)){
if((i+j) %% 2==0) { Acf[i,j]=0 }
}
}
Acf
Dim <- 9
Acf <- matrix(rep(1,dim*dim), nrow = dim, ncol = dim)
for(i in seq(1,dim,1)){
for(j in seq(1,dim,1)){
if((i+j) %% 2==0) { Acf[i,j]=0 }
}
}
Acf
Acf <- 0
Acf <- matrix(rep(1,dim*dim), nrow = dim, ncol = dim)
for(i in seq(1,dim,1)){
for(j in seq(1,dim,1)){
if((i+j) %% 2==0) { Acf[i,j]=0 }
}
}
Acf
Acf
Acf <- 0
Acf
dim <- 9
Acf <- matrix(rep(1,dim*dim), nrow = dim, ncol = dim)
for(i in seq(1,dim,1)){
for(j in seq(1,dim,1)){
if((i+j) %% 2==0) { Acf[i,j]=0 }
}
}
AdjM <- 1*(as.matrix(dist(cbind(X,Y,Z),method = "euclidian"))<Ld) * Acf
AdjM <- 1*(as.matrix(dist(cbind(c(SX[1,]),c(SY[1,]),c(SZ[1,])),method = "euclidian"))<Ld) * Acf
G <- graph_from_adjacency_matrix(AdjM,mode = "undirected",diag = FALSE)
plot.igraph(G)
plot.igraph(G-vertex(1))
plot.igraph(G-vertex(2))
plot.igraph(G-vertex(3))
G
plot.igraph(G-vertex(9))
plot.igraph(G-vertex(8))
plot.igraph(G-vertex(7))
iscon <- function(X,Y,Z,Ld) {
Dim <- length(X)
# Calc adj matrix (Notice Acf factor)
AdjM <- 1*(as.matrix(dist(cbind(X,Y,Z),method = "euclidian"))<Ld) * Acf
# Convert to graph
G <- graph_from_adjacency_matrix(AdjM,mode = "undirected",diag = FALSE)
# Check connected
return(1*(is_connected(G)))
}
mratio2 <- function(X,Y,Z) {
Dim <- length(X)
# Calc adj matrix (Notice Acf factor)
AdjM <- 1*(as.matrix(dist(cbind(X,Y,Z),method = "euclidian"))<Ld) * Acf
# Convert to graph
G <- graph_from_adjacency_matrix(AdjM,mode = "undirected",diag = FALSE,add.colnames = NULL)
# Calc mratio
CV1 <- seq(Dim,0.5,-2)
CV2 <- seq(Dim-1,0.5,-2)
L1 <- length(CV1)
L2 <- length(CV2)
M <- rep(0,L1*L2)
n=1
for(l in CV1){
for(o in CV2){
M[n] <- is_connected(G-vertex(l,o))
n=n+1
}
}
return(L1*L2/sum(M))
}
Ti <- 1
for(j in seq(1,Si,1)){
k=0
SUM=0
while(SUM < Ti)
{
C <- rep(0,Ns)
X <- matrix(round(runif(Ns*1,min=0,max = Lx),3), ncol = 1)
Y <- matrix(round(runif(Ns*1,min=0,max = Ly),3), ncol = 1)
Z <- matrix(round(runif(Ns*1,min=0,max = Lz),3), ncol = 1)
################################################
# Combine fixed particle with configurations to create cluster of size (N+1)
X2 <- cbind(X,rev(SX[j,]))
Y2 <- cbind(Y,rev(SY[j,]))
Z2 <- cbind(Z,rev(SZ[j,]))
X <- X2
Y <- Y2
Z <- Z2
rm(X2,Y2,Z2)
#I th configuration
for(i in seq(1,Ns,1)){
C[i] <-  iscon(c(X[i,]),c(Y[i,]),c(Z[i,]),Ld)
}
IND <- which(C==1)
if(exists("TX"))
{
TIND <- rbind(TIND,C)
TX <- rbind(TX,X[IND,][1:Ti,])
TY <- rbind(TY,Y[IND,][1:Ti,])
TZ <- rbind(TZ,Z[IND,][1:Ti,])
} else {
TIND <- C
TX <- X[IND,][1:Ti,]
TY <- Y[IND,][1:Ti,]
TZ <- Z[IND,][1:Ti,]
}
k=k+1
SUM <- SUM + sum(C)
}
}
M12 <- rep(0,Si)
for(j in seq(1,Si,1)){
M12[j] <- mratio1(c(TX[j,]),c(TY[j,]),c(TZ[j,]))
}
M2 <- rep(0,Si)
for(j in seq(1,Si,1)){
M2[j] <- mratio2(c(TX[j,]),c(TY[j,]),c(TZ[j,]))
}
dim <- 10
Acf <- matrix(rep(1,dim*dim), nrow = dim, ncol = dim)
for(i in seq(1,dim,1)){
for(j in seq(1,dim,1)){
if((i+j) %% 2==0) { Acf[i,j]=0 }
}
}
################################################
# Function to find if cluster is connected
iscon <- function(X,Y,Z,Ld) {
Dim <- length(X)
# Calc adj matrix (Notice Acf factor)
AdjM <- 1*(as.matrix(dist(cbind(X,Y,Z),method = "euclidian"))<Ld) * Acf
# Convert to graph
G <- graph_from_adjacency_matrix(AdjM,mode = "undirected",diag = FALSE)
# Check connected
return(1*(is_connected(G)))
}
mratio2 <- function(X,Y,Z) {
Dim <- length(X)
# Calc adj matrix (Notice Acf factor)
AdjM <- 1*(as.matrix(dist(cbind(X,Y,Z),method = "euclidian"))<Ld) * Acf
# Convert to graph
G <- graph_from_adjacency_matrix(AdjM,mode = "undirected",diag = FALSE,add.colnames = NULL)
# Calc mratio
CV1 <- seq(Dim,0.5,-2)
CV2 <- seq(Dim-1,0.5,-2)
L1 <- length(CV1)
L2 <- length(CV2)
M <- rep(0,L1*L2)
n=1
for(l in CV1){
for(o in CV2){
M[n] <- is_connected(G-vertex(l,o))
n=n+1
}
}
return(L1*L2/sum(M))
}
################################################
################################################
Ti <- 1
for(j in seq(1,Si,1)){
k=0
SUM=0
while(SUM < Ti)
{
C <- rep(0,Ns)
X <- matrix(round(runif(Ns*1,min=0,max = Lx),3), ncol = 1)
Y <- matrix(round(runif(Ns*1,min=0,max = Ly),3), ncol = 1)
Z <- matrix(round(runif(Ns*1,min=0,max = Lz),3), ncol = 1)
################################################
# Combine fixed particle with configurations to create cluster of size (N+1)
X2 <- cbind(X,rev(SX[j,]))
Y2 <- cbind(Y,rev(SY[j,]))
Z2 <- cbind(Z,rev(SZ[j,]))
X <- X2
Y <- Y2
Z <- Z2
rm(X2,Y2,Z2)
#I th configuration
for(i in seq(1,Ns,1)){
C[i] <-  iscon(c(X[i,]),c(Y[i,]),c(Z[i,]),Ld)
}
IND <- which(C==1)
if(exists("TX"))
{
TIND <- rbind(TIND,C)
TX <- rbind(TX,X[IND,][1:Ti,])
TY <- rbind(TY,Y[IND,][1:Ti,])
TZ <- rbind(TZ,Z[IND,][1:Ti,])
} else {
TIND <- C
TX <- X[IND,][1:Ti,]
TY <- Y[IND,][1:Ti,]
TZ <- Z[IND,][1:Ti,]
}
k=k+1
SUM <- SUM + sum(C)
}
}
M12 <- rep(0,Si)
for(j in seq(1,Si,1)){
M12[j] <- mratio1(c(TX[j,]),c(TY[j,]),c(TZ[j,]))
}
M2 <- rep(0,Si)
for(j in seq(1,Si,1)){
M2[j] <- mratio2(c(TX[j,]),c(TY[j,]),c(TZ[j,]))
}
dim <- 10
TX <- read.table(file = paste0('TX'))
TY <- read.table(file = paste0('TY'))
TZ <- read.table(file = paste0('TZ'))
TX
v1 <- read.table('child_0/volume_Cl.txt')$V1
v2 <- read.table('child_1/volume_Na.txt')$V1
L <- length(read.table('child_0/volume.txt')$V1)
v <- c(read.table('child_0/volume.txt')$V1,read.table('child_1/volume.txt')$V1)
V1 <- c(rep(v1,L),rep(v2,L))
M1 <- c(read.table('child_0/M1')$V1,read.table('child_1/M1')$V1)
M2 <- c(read.table('child_0/M2')$V1,read.table('child_1/M2')$V1)
M12 <- c(read.table('child_0/M12')$V1,read.table('child_1/M12')$V1)
VE <- (exp(-(-log(V1*M1) -log(v*M12) + log(M2))))
VE2 <- VE[is.finite(VE)]
print(mean(  VE2  ))
plot(density(VE))
dG <- -log(V1*M1) -log(v*M12) + log(M2)
plot(density(dG))
dG <- -log(V1*M1) -log(v*M12) 
-log(mean(exp(-dG)))
log(mean(exp(-dG)))
-log(mean(exp(-dG)))
log(M2)
-log(mean(exp(-log(M2))))
-log(mean(exp(-dG)))
-log(mean(exp(-dG))) + -log(mean(exp(-log(M2))))
exp(-(-log(mean(exp(-dG))) + -log(mean(exp(-log(M2))))))
P <- exp(-dG)/sum(exp(-dG))
P[2:5]
-log(sum(exp(P*-log(M2))))
head(log(M2))
head(P*log(M2))
head(sum(P*log(M2)))
 -log(mean(exp(-log(M2))))))
 -log(mean(exp(-log(M2)))))
 -log(mean(exp(-log(M2))))
VE2
mean(VE2)
head(P*log(M2))
sum(P*log(M2) )
-log(mean(exp(-dG)))
1.256426 - 0.0546256
exp(-(1.256426 - 0.0546256))
exp(-1.2)
exp(-1.05)
exp(-(-log(mean(exp(-dG))) + -log(mean(exp(-log(M2))))))
dG <- -log(V1*M1) -log(v*M12) + log(M2)
-log(mean(exp(-dG)))
(mean(exp(-dG))
)
q()
q()
v1 <- read.table('child_0/volume_Cl.txt')$V1
v2 <- read.table('child_1/volume_Na.txt')$V1
L <- length(read.table('child_0/volume.txt')$V1)
v <- c(read.table('child_0/volume.txt')$V1,read.table('child_1/volume.txt')$V1)
V1 <- c(rep(v1,L),rep(v2,L))
M1 <- c(read.table('child_0/M1')$V1,read.table('child_1/M1')$V1)
M2 <- c(read.table('child_0/M2')$V1,read.table('child_1/M2')$V1)
M12 <- c(read.table('child_0/M12')$V1,read.table('child_1/M12')$V1)
VE <- (exp(-(-log(V1*M1) -log(v*M12) + log(M2))))
VE2 <- VE[is.finite(VE)]
print(mean(  VE2  ))
-log(M1*M12) + log(M2)
log(M2)
log(M12)
log(M1)
-log(M12) + log(M2)
length(v)
length(V1)
-log(v*V1)
exp(-log(v*V1))
exp(log(v*V1))
mean(exp(-log(v*V1)))
mean(exp(-log(v*V1)))
-log(mean(exp(-log(v*V1))))
exp(-log(mean(exp(-log(v*V1)))))
exp(-log(mean(exp(log(v*V1)))))
dG <- -log(v*V1)
dG
-log(mean(exp(-dG)))
G <- -log(mean(exp(-dG)))
exp(-G)
M12
M2
-log(M1*M12)
-log(M12/M2)
exp(log(M12/M2))
mean(exp(log(M12/M2)))
-log(mean(exp(log(M12/M2))))
exp(log(mean(exp(log(M12/M2)))))
q()
v1 <- read.table('child_0/volume_Cl.txt')$V1
v2 <- read.table('child_1/volume_Na.txt')$V1
L <- length(read.table('child_0/volume.txt')$V1)
v <- c(read.table('child_0/volume.txt')$V1,read.table('child_1/volume.txt')$V1)
V1 <- c(rep(v1,L),rep(v2,L))
M1 <- c(read.table('child_0/M1')$V1,read.table('child_1/M1')$V1)
M2 <- c(read.table('child_0/M2')$V1,read.table('child_1/M2')$V1)
M12 <- c(read.table('child_0/M12')$V1,read.table('child_1/M12')$V1)
VE <- (exp(-(-log(V1*M1) -log(v*M12) + log(M2))))
VE2 <- VE[is.finite(VE)]
print(mean(  VE2  ))
dG <- (exp(-(-log(V1) -log(v*M12) + log(M2))))
mean(VE2)
dG <- (exp(-(-log(V1) -log(v) + log(1))))
mean(dG)
dG <- (exp(-(-log(V1) -log(v*M12) + log(1))))
mean(dG)
dG <- (exp(-(-log(V1) -log(v*M12) + log(M2))))
mean(dG)
L
dG <- (exp(-(-log(V1[1:L]) -log(v*M12)[1:L] + log(M2)[1:L])))
L
mean(dG)
q()
v1 <- read.table('child_0/volume_Cl.txt')$V1
v2 <- read.table('child_1/volume_Na.txt')$V1
L <- length(read.table('child_0/volume.txt')$V1)
v <- c(read.table('child_0/volume.txt')$V1,read.table('child_1/volume.txt')$V1)
V1 <- c(rep(v1,L),rep(v2,L))
M1 <- c(read.table('child_0/M1')$V1,read.table('child_1/M1')$V1)
M2 <- c(read.table('child_0/M2')$V1,read.table('child_1/M2')$V1)
M12 <- c(read.table('child_0/M12')$V1,read.table('child_1/M12')$V1)
VE <- (exp(-(-log(V1) -log(v*M12) + log(M2))))
VE2 <- VE[is.finite(VE)]
print(mean(  VE2  ))
print(exp(-(-log(V1) -log(v) )))
print(mean(exp(-(-log(V1) -log(v) ))))
print(mean(exp(-(-log(V1) -log(0.5*v) ))))
q()
print(mean(exp(-(-log(V1) -log(v*1.5) ))))
print(mean(exp(-(-log(V1) -log(v) ))))
print(mean(exp(-(-log(V1) -log(v*1.2) ))))
print(mean(exp(-(-log(V1) -log(v*1.3) ))))
print(mean(exp(-(-log(V1) -log(v*1.4) ))))
print(mean(exp(-(-log(V1) -log(v*1.45) ))))
print(mean(exp(-(-log(V1) -log(v*1.42) ))))
print(mean(exp(-(-log(V1) -log(v*1.41) ))))
print(mean(exp(-(-log(V1) -log(v*1.414) ))))
print(mean(exp(-(-log(V1) -log(v*1.4) ))))
print(mean(exp(-(-log(M1*M12/M2) ))))
print(mean(exp(-(-log(V1*M1) -log(v*M12) +log(M2) ))))
q()
v <- 0.18
v <- c(read.table('child_0/volume.txt')$V1,read.table('child_1/volume.txt')$V1)
Cl <- c(read.table('child_0/Cl.txt')$V1,read.table('child_1/Cl.txt')$V1)
V <- 0.18C*2
V <- 0.18*2
V*(v/Cl+1)
V*(v/(Cl+1))
mean(V*(v/(Cl+1)))
Cl
mean(Cl)
q()
-log(0.42/4)
-log(0.424/404)
-log(0.424/0.404)
q()
v1 <- read.table('child_0/volume_Cl.txt')$V1
v2 <- read.table('child_1/volume_Na.txt')$V1
L <- length(read.table('child_0/volume.txt')$V1)
v <- c(read.table('child_0/volume.txt')$V1,read.table('child_1/volume.txt')$V1)
Cl <- c(read.table('child_0/Cl.txt')$V1,read.table('child_1/Cl.txt')$V1)+1
V1 <- v1+v2
#V1 <- c(rep(v1,L),rep(v2,L))
#M1 <- c(read.table('child_0/M1')$V1,read.table('child_1/M1')$V1)
#M2 <- c(read.table('child_0/M2')$V1,read.table('child_1/M2')$V1)
#M12 <- c(read.table('child_0/M12')$V1,read.table('child_1/M12')$V1)
#VE <- (exp(-(-log(V1) -log(v*M12) + log(M2))))
#VE2 <- VE[is.finite(VE)]
print(mean( V1*(v/Cl)  ))
v <- read.table('child_0/volume.txt')$V1
Cl <- read.table('child_0/Cl.txt')$V1
v1*v/C;
v1*v/Cl
v1*(v/Cl)
v1*(v/(Cl+1))
mean(v1*(v/(Cl+1)))
mean(v1*(v/(Cl+1)))*2
more C;
more Cl
Cl
sum(Cl)
q()
